thing Base includes TimerMsgs , LEDMsgs , POTmsgs {
	required port timer @sync_send "true" {
		sends timer_start sends timer_cancel receives timer_timeout
	}
	required port ledRed {
		sends led_ON sends led_OFF
	}
	required port pot {
		receives read_value
	}
	statechart TrafficLights init READY {
		state READY {
			on entry do
				ledRed!led_OFF()
			end
			internal
			event e : pot?read_value
			action do
				if (e.val > 100) do
					ledRed!led_ON()
				end
			end
		}
	}
}
thing LEDMsgs {
	message led_ON()
	message led_OFF()
}
thing LED includes LEDMsgs {
	provided port ctrl {
		receives led_ON receives led_OFF
	}
	property PIN : UInt8 = 10
	function setDigitalOutput(pin : UInt8) do
		`pinMode(` & pin & `, OUTPUT);`
	end
	function digitalWrite(pin : UInt8, value : DigitalState) do
		`digitalWrite(` & pin & `, ` & value & `);`
	end
	statechart LED init READY {
		on entry setDigitalOutput(PIN)
		state READY {
			internal
			event ctrl?led_ON
			action digitalWrite(PIN, DigitalState : HIGH)
			internal
			event ctrl?led_OFF
			action digitalWrite(PIN, DigitalState : LOW)
		}
	}
}
thing fragment POTmsgs {
	message read_value(val : UInt32)
}
thing POT includes POTmsgs , TimerMsgs {
	required port clock {
		receives ms25_tic
	}
	provided port potValue @sync_send "true" {
		sends read_value
	}
	property PIN : UInt8 = 16
	function getValue(pin : UInt8) : UInt32 do
		`analogRead(` & pin & `);`
	end
	statechart POT init READY {
		state READY {
			internal
			event clock?ms25_tic
			action do
				potValue!read_value(getValue(PIN))
			end
		}
	}
}
datatype Char<1>
	@type_checker "Integer"
	@c_type "char"
	@c_byte_size "1"
object String
	@type_checker "String"
	@c_type "char *"
	@c_byte_size "2"
datatype Boolean<1>
	@type_checker "Boolean"
	@c_type "uint8_t"
	@c_byte_size "1"
datatype UInt8<1>
	@type_checker "Integer"
	@c_type "uint8_t"
	@c_byte_size "1"
datatype UInt16<2>
	@type_checker "Integer"
	@c_type "uint16_t"
	@c_byte_size "2"
	@java_type "int"
	@java_primitive "true"
datatype Int16<2>
	@type_checker "Integer"
	@c_type "int16_t"
	@c_byte_size "2"
datatype UInt32<4>
	@type_checker "Integer"
	@c_type "uint32_t"
	@c_byte_size "4"
datatype Integer<2>
	@type_checker "Integer"
	@c_type "int16_t"
	@c_byte_size "2"
datatype Long<4>
	@type_checker "Integer"
	@c_type "long"
	@c_byte_size "4"
datatype Float<4>
	@type_checker "Real"
	@c_type "float"
	@c_byte_size "4"
enumeration DigitalState
	@c_byte_size "1"
	@c_type "uint8_t"
	{
	LOW @enum_val "0"
	HIGH @enum_val "1"
}
datatype Byte<1>
	@type_checker "Integer"
	@c_type "uint8_t"
	@c_byte_size "1"
	@java_type "byte"
	@java_primitive "true"
	@scala_type "Byte"
	@SenML_type "Double"
enumeration DigitalState
	@c_type "uint8_t"
	@c_byte_size "1"
	{
	LOW @enum_val "0"
	HIGH @enum_val "1"
}
thing fragment TimerMsgs {
	message timer_start(id : UInt8, time : UInt32)
	@timer_start "true" message timer_cancel(id : UInt8)
	@timer_cancel "true" message timer_timeout(id : UInt8)
	@timeout "true"
	message ms25_tic()
	@xms_tic "25"
	message ms100_tic()
	@xms_tic "100" message ms500_tic()
	@xms_tic "500"
}
protocol Timer

configuration Base {
	instance Base : Base
	instance pot : POT
	instance ledRed : LED
	connector Base.ledRed => ledRed . ctrl
	connector Base.pot => pot . potValue
	connector Base.timer over Timer
	connector pot.clock over Timer
	set pot.PIN = 16
	set ledRed.PIN = 4
}
